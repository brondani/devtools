
if ($ENV{GCC_TOOLCHAIN_12_2_1} STREQUAL "")
  message(ERROR "Environment variable AC6_TOOLCHAIN_6_19_0 must be set")
endif()
cmake_path(SET TOOLCHAIN_ROOT NORMALIZE $ENV{GCC_TOOLCHAIN_12_2_1})

set(CMAKE_C_COMPILER_ID "GNU")
set(PREFIX "arm-none-eabi-")
set(AS "as")
set(CC "gcc")
set(CXX "g++")
set(CPP "gcc")
set(OC "objcopy")

if (CMAKE_HOST_WIN32)
  set(EXT .exe)
endif()

set(AS ${TOOLCHAIN_ROOT}/${PREFIX}${AS}${EXT})
set(CC ${TOOLCHAIN_ROOT}/${PREFIX}${CC}${EXT})
set(CXX ${TOOLCHAIN_ROOT}/${PREFIX}${CXX}${EXT})
set(CPP ${TOOLCHAIN_ROOT}/${PREFIX}${CPP}${EXT})
set(OC ${TOOLCHAIN_ROOT}/${PREFIX}${OC}${EXT})

# Set CMake variables for toolchain initialization
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_CROSSCOMPILING TRUE)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(CMAKE_ASM_COMPILER "${CC}")
set(CMAKE_AS_LEG_COMPILER "${AS}")
set(CMAKE_AS_GNU_COMPILER "${CC}")
set(CMAKE_C_COMPILER "${CC}")
set(CMAKE_CXX_COMPILER "${CXX}")
set(CMAKE_OBJCOPY "${OC}")
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/CMakeASM")

# Set CMake flags for compiler identification
set(CMAKE_C_FLAGS_INIT ${CC_CPU})
set(CMAKE_CXX_FLAGS_INIT ${CXX_CPU})

# Skip compiler identification
set(CMAKE_C_COMPILER_ID_RUN TRUE)
set(CMAKE_C_COMPILER_VERSION "${TOOLCHAIN_VERSION}")
set(CMAKE_C_COMPILER_FORCED TRUE)
set(CMAKE_C_COMPILER_WORKS TRUE)
set(CMAKE_CXX_COMPILER_ID "${CMAKE_C_COMPILER_ID}")
set(CMAKE_CXX_COMPILER_ID_RUN "${CMAKE_C_COMPILER_ID_RUN}")
set(CMAKE_CXX_COMPILER_VERSION "${CMAKE_C_COMPILER_VERSION}")
set(CMAKE_CXX_COMPILER_FORCED "${CMAKE_C_COMPILER_FORCED}")
set(CMAKE_CXX_COMPILER_WORKS "${CMAKE_C_COMPILER_WORKS}")
